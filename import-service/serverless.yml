service: import-service

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs12.x
  profile: danila_loginov

  environment:
    S3_BUCKET_NAME: bucket
    S3_PARSED_PREFIX: parsed/
    S3_REGION: eu-central-1
    S3_UPLOADED_PREFIX: uploaded/

    SNS_TOPIC:
      Ref: SNSTopic

    SQS_QUEUE:
      Ref: SQSQueue

  iamRoleStatements:
    - Action:
        - s3:ListBucket
      Effect: Allow
      Resource:
        - arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}
    - Action:
        - s3:*
      Effect: Allow
      Resource:
        - arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*
    - Action:
        - sqs:*
      Effect: Allow
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]
    - Action:
        - sns:*
      Effect: Allow
      Resource:
        Ref: SNSTopic

plugins:
  - serverless-plugin-webpack

resources:
  Resources:
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: danila@loginov.rocks
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: nodejs-aws-be-import-topic
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: nodejs-aws-be-import-queue

functions:
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${self:provider.environment.S3_UPLOADED_PREFIX}
          existing: true
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                name: true
  queueHandler:
    handler: handler.queueHandler
    events:
      - sqs:
          batchSize: 2
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
